name: $(Date:yyyyMMdd)
trigger:
  branches:
    include:
    - develop
  paths:
    include:
    - smart_contracts/*
    - protobuf/*
    - router/openwrt_pkgs/saw/*
    - router/*
    exclude:
    - router/openwrt_pkgs/*
pr:
  autoCancel: true
  branches:
    include:
    - develop
  paths:
    include:
    - smart_contracts/*
    - protobuf/*
    - router/openwrt_pkgs/saw/*
    - router/*
    exclude:
    - router/openwrt_pkgs/*

variables:
- group: env-prod
- group: bintray-credentials-ds

jobs:
- job: solc
  displayName: 'Compile Smart Contract'
  pool:
    vmImage: ubuntu-16.04
  steps:
  - template: templates/build-solc.yaml
    parameters:
      contractsDir: $(Build.SourcesDirectory)/smart_contracts
      contractFile: saw_contract.sol
  - task: PublishPipelineArtifact@0
    displayName: 'Publish artifact for release pipeline'
    inputs:
      artifactName: saw-contract
      targetPath: $(Build.SourcesDirectory)/smart_contracts/contract.json

- job: protoc
  displayName: 'Compile Protobuf (gRPC) definitions'
  pool:
    vmImage: ubuntu-16.04
  steps:
  - template: templates/build-protoc.yaml
    parameters:
      protobufDir: $(Build.SourcesDirectory)/protobuf
      outDir: $(Build.SourcesDirectory)/router/src/grpc
  - task: PublishPipelineArtifact@0
    displayName: 'Publish artifact for release pipeline'
    inputs:
      artifactName: saw-service-protobuf
      targetPath: $(Build.SourcesDirectory)/router/src/grpc

- job: saw_ts
  displayName: 'Compile TypeScript'
  dependsOn: protoc
  condition: succeeded()
  pool:
    vmImage: ubuntu-16.04
  steps:
  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: saw-service-protobuf
      targetPath: $(Build.SourcesDirectory)/router/src/grpc
  - template: templates/build-ts.yaml
    parameters:
      srcDir: $(Build.SourcesDirectory)/router
      outDir: $(Build.SourcesDirectory)/router/build
  - task: PublishPipelineArtifact@0
    displayName: 'Publish artifact for release pipeline'
    inputs:
      artifactName: saw-service-ts
      targetPath: $(Build.SourcesDirectory)/router/build

- job: saw_openwrt
  displayName: 'Package and Deploy for OpenWrt (opkg)'
  dependsOn:
  - solc
  - saw_ts
  condition: succeeded()
  pool:
    vmImage: ubuntu-16.04
  steps:
  - task: DownloadPipelineArtifact@0
    displayName: 'Retrieve Smart Contract'
    inputs:
      artifactName: saw-contract
      targetPath: $(Build.SourcesDirectory)/router/openwrt_pkgs/saw/files/etc/saw
  - task: DownloadPipelineArtifact@0
    displayName: 'Retrieve SAW Service'
    inputs:
      artifactName: saw-service-ts
      targetPath: $(Build.SourcesDirectory)/router/openwrt_pkgs/saw/files/etc/saw
  - bash: 'find ./openwrt_pkgs -mindepth 1 ! -regex "^./openwrt_pkgs/saw\(/.*\)?" -delete'
    displayName: 'Extract SAW openwrt source package from feed (skip building dependencies)'
    workingDirectory: $(Build.SourcesDirectory)/router
  - template: templates/build-opkg.yaml
    parameters:
      srcDir:  $(Build.SourcesDirectory)/router/openwrt_pkgs
      outDir: $(Build.StagingDirectory)
      pkgName: saw
      skipUpdate: true
  - bash: 'sed -i "/\"grpc\""/d $(Build.SourcesDirectory)/router/package.json'
    displayName: Remove precompiled dependencies from NPM package definition
  - task: PublishPipelineArtifact@0
    displayName: 'Publish artifact for release pipeline'
    inputs:
      artifactName: saw-service-opkg
      targetPath: $(Build.StagingDirectory)/custom
  - template: templates/publish-opkg-bintray.yaml
    parameters:
      pkgName: saw
      pkgDir: $(Build.StagingDirectory)/custom
